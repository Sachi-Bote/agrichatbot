# -*- coding: utf-8 -*-

# ============================================
# Fully Automated Hyperlocal Weather Pipeline
# (Sentinel-2 + Sentinel-1 + DEM + NASA POWER + Enhanced Features + Merge + Fill NaNs)
# Trains on multiple India locations
# Saves global model for future use
# ============================================

import ee
import requests
import pandas as pd
import datetime
import numpy as np
import sys
import joblib
import os
from concurrent.futures import ThreadPoolExecutor, as_completed

# -------------------------------
# Step 0: Authenticate & Initialize GEE
# -------------------------------


def initialize_gee():
    SERVICE_ACCOUNT = 'weather-predic-acc@weather4-470605.iam.gserviceaccount.com'
    KEY_PATH = 'C:/Users/Admin/Desktop/weather4-470605-c30c9521b3d5.json'  # Path to your JSON key file

    try:
        credentials = ee.ServiceAccountCredentials(SERVICE_ACCOUNT, KEY_PATH)
        ee.Initialize(credentials)
        print("GEE initialized with service account.")
    except ee.EEException as e:
        print("Failed to initialize GEE with service account:", e)
        sys.exit(1)

# -------------------------------
# Step 1: Accept lat/lon
# -------------------------------

def get_location():
    lat = float(input("Enter latitude: "))
    lon = float(input("Enter longitude: "))
    return lat, lon

# -------------------------------
# Step 2: Fetch Sentinel-2 Bands + NDVI + EVI + SAVI
# -------------------------------

def fetch_sentinel2(lat, lon, start_date, end_date):
    point = ee.Geometry.Point([lon, lat])
    collection = ee.ImageCollection('COPERNICUS/S2') \
        .filterBounds(point) \
        .filterDate(start_date, end_date) \
        .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 80)) \
        .select(['B1','B2','B3','B4','B5','B6','B7','B8','B8A','B9','B10','B11','B12'])

    print("Sentinel-2 image count:", collection.size().getInfo())
    if collection.size().getInfo() == 0:
        print("⚠️ No Sentinel-2 images found")
        return pd.DataFrame()

    # Add NDVI
    collection = collection.map(lambda img: img.addBands(img.normalizedDifference(['B8', 'B4']).rename('NDVI')))

    # Add EVI
    def add_evi(img):
        evi = img.expression(
            '2.5 * ((nir - red) / (nir + 6 * red - 7.5 * blue + 1))',
            {
                'nir': img.select('B8'),
                'red': img.select('B4'),
                'blue': img.select('B2'),
            }
        ).rename('EVI')
        return img.addBands(evi)
    collection = collection.map(add_evi)

    # Add SAVI with L=0.5
    def add_savi(img):
        l = 0.5
        savi = img.expression(
            '((nir - red) / (nir + red + L)) * (1 + L)',
            {
                'nir': img.select('B8'),
                'red': img.select('B4'),
                'L': l
            }
        ).rename('SAVI')
        return img.addBands(savi)
    collection = collection.map(add_savi)

    def reduce_to_feature(img):
        stats = img.reduceRegion(
            reducer=ee.Reducer.mean(),
            geometry=point,
            scale=10
        )
        return ee.Feature(None, stats).set('date', img.date().format('YYYY-MM-dd'))

    fc = collection.map(reduce_to_feature)
    features = fc.getInfo()['features']
    data = [f['properties'] for f in features]
    df = pd.DataFrame(data)
    if not df.empty:
        df['date'] = pd.to_datetime(df['date']).dt.strftime('%Y-%m-%d')
        df.interpolate(method='nearest', limit_direction='both', inplace=True)
    return df

# -------------------------------
# Step 3: Fetch Sentinel-1 VV/VH
# -------------------------------

def fetch_sentinel1(lat, lon, start_date, end_date):
    point = ee.Geometry.Point([lon, lat])
    collection = ee.ImageCollection('COPERNICUS/S1_GRD') \
        .filterBounds(point) \
        .filterDate(start_date, end_date) \
        .filter(ee.Filter.eq('instrumentMode', 'IW')) \
        .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV')) \
        .select(['VV','VH'])

    print("Sentinel-1 image count:", collection.size().getInfo())
    if collection.size().getInfo() == 0:
        print("⚠️ No Sentinel-1 images found")
        return pd.DataFrame()

    def reduce_to_feature(img):
        stats = img.reduceRegion(
            reducer=ee.Reducer.mean(),
            geometry=point,
            scale=10
        )
        return ee.Feature(None, stats).set('date', img.date().format('YYYY-MM-dd'))

    fc = collection.map(reduce_to_feature)
    features = fc.getInfo()['features']
    data = [f['properties'] for f in features]
    df = pd.DataFrame(data)
    if not df.empty:
        for col in ['VV','VH']:
            if col in df.columns:
                df[col] = pd.to_numeric(df[col], errors='coerce')
        df['date'] = pd.to_datetime(df['date']).dt.strftime('%Y-%m-%d')
        df.interpolate(method='nearest', limit_direction='both', inplace=True)
    return df

# -------------------------------
# Helper: Calculate slope, aspect, hillshade from DEM elevation array
# -------------------------------

def calculate_slope_aspect_hillshade(dem_array, pixel_size=30):
    dzdx, dzdy = np.gradient(dem_array, pixel_size, pixel_size)
    slope = np.arctan(np.sqrt(dzdx**2 + dzdy**2)) * (180 / np.pi)
    aspect = np.arctan2(dzdy, -dzdx)
    aspect = np.where(aspect < 0, 2 * np.pi + aspect, aspect)
    aspect_deg = np.degrees(aspect)

    azimuth = 315.0
    altitude = 45.0
    azimuth_rad = np.radians(azimuth)
    altitude_rad = np.radians(altitude)

    hillshade = (np.cos(altitude_rad) * np.cos(np.radians(slope)) +
                 np.sin(altitude_rad) * np.sin(np.radians(slope)) * np.cos(azimuth_rad - np.radians(aspect_deg)))
    hillshade = np.clip(hillshade, 0, 1)
    return slope, aspect_deg, hillshade

# -------------------------------
# Step 4: Fetch DEM and derived topo features
# -------------------------------

def fetch_dem_and_topo(lat, lon):
    point = ee.Geometry.Point([lon, lat])
    try:
        dem_img = ee.Image("USGS/SRTMGL1_003")
        dem_value = dem_img.sample(point, scale=30).first().get('elevation').getInfo()

        geom_bbox = ee.Geometry.Rectangle([lon - 0.00027, lat - 0.00027, lon + 0.00027, lat + 0.00027])
        dem_region = dem_img.sampleRectangle(region=geom_bbox, defaultValue=0).get('elevation').getInfo()

        if dem_region and isinstance(dem_region, list) and all(isinstance(row, list) for row in dem_region):
            dem_array = np.array(dem_region)
            slope, aspect, hillshade = calculate_slope_aspect_hillshade(dem_array)
            center_idx = dem_array.shape[0] // 2
            slope_c = slope[center_idx, center_idx]
            aspect_c = aspect[center_idx, center_idx]
            hillshade_c = hillshade[center_idx, center_idx]
        else:
            slope_c = 0
            aspect_c = 0
            hillshade_c = 0
        return dem_value, slope_c, aspect_c, hillshade_c
    except Exception as e:
        print(f"❌ DEM or topo fetch failed: {e}, fallback values used")
        return 200, 0, 0, 0

# -------------------------------
# Step 5: Fetch NASA POWER weather data with lagged features
# -------------------------------

def fetch_nasa_power_with_lags(lat, lon, start_date, end_date):
    url = f"https://power.larc.nasa.gov/api/temporal/daily/point?parameters=T2M,RH2M,PRECTOT&community=AG&longitude={lon}&latitude={lat}&start={start_date.replace('-','')}&end={end_date.replace('-','')}&format=JSON"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()['properties']['parameter']
        df = pd.DataFrame(data)
        df['date'] = pd.to_datetime(df.index, format='%Y%m%d').strftime('%Y-%m-%d')
        df.reset_index(drop=True, inplace=True)
        return df
    except Exception as e:
        print(f"❌ NASA POWER fetch failed: {e}")
        return pd.DataFrame()
# -------------------------------
# Step 6: Merge data with all features and temporal attributes
# -------------------------------

def merge_data_enhanced(ndvi_df, s1_df, nasa_df, dem, slope, aspect, hillshade):
    all_dates = []
    for df in [ndvi_df, s1_df, nasa_df]:
        if not df.empty:
            all_dates += df['date'].tolist()

    if not all_dates:
        start = (datetime.datetime.today() - datetime.timedelta(days=30)).strftime('%Y-%m-%d')
        end = datetime.datetime.today().strftime('%Y-%m-%d')
    else:
        start = min(all_dates)
        end = max(all_dates)

    full_dates = pd.DataFrame({'date': pd.date_range(start=start, end=end, freq='D').strftime('%Y-%m-%d')})
    df = full_dates.copy()

    for source_df in [ndvi_df, s1_df, nasa_df]:
        if not source_df.empty:
            df = pd.merge(df, source_df, on='date', how='left')

    # Rename PRECTOT to PRECTOTCORR if not present
    if 'PRECTOTCORR' not in df.columns and 'PRECTOT' in df.columns:
        df['PRECTOTCORR'] = df['PRECTOT']

    df['DEM'] = dem
    df['Slope'] = slope
    df['Aspect'] = aspect
    df['Hillshade'] = hillshade

    df['date_dt'] = pd.to_datetime(df['date'])
    day_of_year = df['date_dt'].dt.dayofyear
    df['sin_day'] = np.sin(2 * np.pi * day_of_year / 365.25)
    df['cos_day'] = np.cos(2 * np.pi * day_of_year / 365.25)
    df.drop(columns=['date_dt'], inplace=True)

    df = df.sort_values('date').reset_index(drop=True)
    df.interpolate(method='nearest', limit_direction='both', inplace=True)
    df.ffill(inplace=True)
    df.bfill(inplace=True)

    df = classify_weather(df)

    df['day_number'] = np.arange(1, len(df) + 1)
    return df

# -------------------------------
# Step 7: Your existing classify_weather function
# -------------------------------

def classify_weather(df):
    conditions = []
    for idx, row in df.iterrows():
        prec = row.get('PRECTOT', np.nan)
        cloud_pct = row.get('CLOUDY_PIXEL_PERCENTAGE', np.nan)
        rh = row.get('RH2M', np.nan)
        temp = row.get('T2M', np.nan)

        if pd.isna(prec):
            prec = 0
        if pd.isna(cloud_pct):
            cloud_pct = 0
        if pd.isna(rh):
            rh = 0
        if pd.isna(temp):
            temp = 30

        if prec > 1.0:
            conditions.append('Rainy')
        elif cloud_pct > 50:
            conditions.append('Cloudy')
        elif rh > 90 and temp < 15:
            conditions.append('Foggy')
        else:
            conditions.append('Sunny')

    df['weather_condition'] = conditions
    return df

# -------------------------------
# Step 8: ML Prediction with Quantile Regression (unchanged except GPU enabled)
# -------------------------------

def ml_predict(df):
    import pandas as pd
    import numpy as np
    from sklearn.model_selection import train_test_split
    from sklearn.ensemble import GradientBoostingRegressor, RandomForestRegressor, StackingRegressor
    from xgboost import XGBRegressor
    from catboost import CatBoostRegressor
    from sklearn.linear_model import LinearRegression
    from sklearn.metrics import mean_absolute_error, r2_score, mean_squared_error
    import joblib
    from tqdm import tqdm

    df = df.copy()
    for col in df.columns:
        if df[col].dtype == 'O' and col != 'date':
            try:
                df[col] = pd.to_numeric(df[col], errors='coerce')
            except:
                pass

    df_numeric = df.drop(columns=['date'])
    df_numeric.interpolate(method='nearest', limit_direction='both', inplace=True)
    df_numeric.fillna(0, inplace=True)
    df[df_numeric.columns] = df_numeric

    target = 'PRECTOTCORR'
    if target not in df.columns:
        raise ValueError(f"{target} column not found in dataframe!")

    X = df.drop(columns=[target, 'date'])
    y = df[target]

    feature_names = X.columns.tolist()
    joblib.dump(feature_names, "india_feature_names.pkl")

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    base_models = [
        ('gbr', GradientBoostingRegressor(n_estimators=300, max_depth=6, learning_rate=0.05, random_state=42)),
        ('xgb', XGBRegressor(n_estimators=300, max_depth=6, learning_rate=0.05, random_state=42, verbosity=0, n_jobs=-1)),
        ('rf', RandomForestRegressor(n_estimators=300, max_depth=12, random_state=42, n_jobs=-1)),
        ('cat', CatBoostRegressor(n_estimators=300, depth=6, learning_rate=0.05, random_state=42, verbose=0))
    ]


    stack = StackingRegressor(
        estimators=base_models,
        final_estimator=LinearRegression(),
        n_jobs=1  # disable parallelism in stacking to avoid GPU device conflict
    )

    print("🤖 Training base models with progress:")
    for i, (name, model) in enumerate(tqdm(base_models, desc="Base Models")):
        model.fit(X_train, y_train)
        print(f" ✅ {name} trained.")

    stack.fit(X_train, y_train)

    y_train_pred = stack.predict(X_train)
    y_test_pred = stack.predict(X_test)

    mae_train = mean_absolute_error(y_train, y_train_pred)
    rmse_train = np.sqrt(mean_squared_error(y_train, y_train_pred))
    r2_train = r2_score(y_train, y_train_pred)

    mae_test = mean_absolute_error(y_test, y_test_pred)
    rmse_test = np.sqrt(mean_squared_error(y_test, y_test_pred))
    r2_test = r2_score(y_test, y_test_pred)

    print(f"\n📊 Training Metrics -> MAE: {mae_train:.3f}, RMSE: {rmse_train:.3f}, R²: {r2_train:.4f}")
    print(f"📊 Testing Metrics -> MAE: {mae_test:.3f}, RMSE: {rmse_test:.3f}, R²: {r2_test:.4f}")

    df['predicted_rainfall'] = stack.predict(X)
    df['predicted_rainfall'] = df['predicted_rainfall'].clip(lower=0)

    return stack


# -------------------------------
# Step 9: Fetch complete merged data for one location with enhanced features
# -------------------------------

def fetch_complete_data(lat, lon, start_date, end_date):
    ndvi_df = fetch_sentinel2(lat, lon, start_date, end_date)
    s1_df = fetch_sentinel1(lat, lon, start_date, end_date)
    dem, slope, aspect, hillshade = fetch_dem_and_topo(lat, lon)
    nasa_df = fetch_nasa_power_with_lags(lat, lon, start_date, end_date)
    merged_df = merge_data_enhanced(ndvi_df, s1_df, nasa_df, dem, slope, aspect, hillshade)
    return merged_df

# -------------------------------
# Placeholder for Maharashtra village coordinates (for test, replace with full list when ready)
maharashtra_coordinates = [
    (19.07, 74.75), (19.01, 74.78), (19.14, 74.82), (19.12, 74.79),
    (19.66, 73.93), (19.57, 73.81), (19.46, 73.66), (19.53, 73.74),
    (18.78, 75.32), (18.75, 75.45), (18.79, 75.37), (18.72, 75.35),
    (18.59, 75.11), (18.57, 74.93), (18.66, 75.02), (18.63, 75.14),
    (19.98, 74.55), (19.93, 74.49), (19.89, 74.54), (19.86, 74.45),
    (19.51, 75.02), (19.54, 75.08), (19.58, 75.04), (19.63, 75.01),
    (19.26, 74.45), (19.09, 74.39), (19.17, 74.40), (19.04, 74.33),
    (19.14, 75.05), (19.18, 75.25), (19.10, 75.18), (19.17, 75.15),
    (19.76, 74.48), (19.67, 74.62), (19.73, 74.65), (19.69, 74.55),
    (19.46, 74.67), (19.48, 74.72), (19.41, 74.69), (19.52, 74.79),
    (19.53, 74.05), (19.53, 74.19), (19.47, 74.14), (19.45, 74.18),
    (19.34, 75.14), (19.33, 75.21), (19.28, 75.15), (19.30, 75.19),
    (18.67, 74.68), (18.60, 74.58), (18.73, 74.61), (18.70, 74.73),
    (19.63, 74.75), (19.57, 74.70), (19.60, 74.66), (19.59, 74.79),
    (20.78, 77.01), (20.65, 76.78), (20.63, 76.99), (20.73, 76.81),
    (21.05, 77.08), (21.12, 77.12), (21.16, 76.98), (21.08, 77.15),
    (20.73, 76.81), (20.69, 76.77), (20.69, 76.91), (20.62, 76.74),
    (20.53, 76.99), (20.57, 76.95), (20.59, 76.98), (20.52, 76.95),
    (20.78, 77.34), (20.75, 77.35), (20.69, 77.38), (20.70, 77.31),
    (20.40, 76.82), (20.45, 76.84), (20.35, 76.82), (20.37, 76.88),
    (21.13, 76.92), (21.11, 76.95), (21.08, 77.05), (21.06, 76.97), 
    (21.26, 77.42), (21.28, 77.53), (21.27, 77.38), (21.21, 77.43),
    (20.94, 77.72), (20.90, 77.71), (20.89, 77.79), (20.88, 77.83),
    (21.14, 77.26), (21.17, 77.29), (21.12, 77.20), (21.15, 77.16),
    (20.91, 77.86), (20.84, 77.87), (20.89, 77.85), (20.87, 77.80),
    (21.28, 77.92), (21.31, 77.95), (21.25, 77.96), (21.20, 77.97),
    (20.80, 78.14), (20.78, 78.11), (20.73, 78.14), (20.75, 78.17),
    (21.39, 77.27), (21.46, 77.34), (21.49, 77.30), (21.44, 77.42),
    (21.26, 77.29), (21.22, 77.37), (21.20, 77.30), (21.23, 77.42),
    (21.57, 77.42), (21.56, 77.41), (21.59, 77.34), (21.52, 77.38),
    (20.88, 78.08), (20.87, 78.04), (20.86, 78.09), (20.84, 78.05),
    (21.41, 78.21), (21.33, 78.14), (21.37, 78.25), (21.32, 78.24),
    (20.86, 77.93), (20.82, 77.90), (20.81, 77.94), (20.84, 77.88),
    (20.80, 77.96), (20.83, 77.99), (20.85, 78.03), (20.84, 78.06),
    (21.39, 78.19), (21.41, 78.27), (21.36, 78.14), (21.34, 78.18),
    (19.82, 75.32), (19.92, 75.33), (19.85, 75.40), (19.84, 75.36),
    (19.91, 75.31), (19.98, 75.29), (20.01, 75.35), (20.05, 75.26),
    (20.35, 75.33), (20.31, 75.38), (20.36, 75.30), (20.39, 75.36),
    (20.02, 75.18), (20.00, 75.20), (20.05, 75.19), (20.07, 75.14),
    (19.43, 75.46), (19.33, 75.37), (19.36, 75.42), (19.30, 75.45),
    (20.19, 75.45), (20.17, 75.48), (20.21, 75.52), (20.24, 75.43),
    (20.27, 75.76), (20.33, 75.72), (20.30, 75.80), (20.36, 75.78),
    (20.61, 75.61), (20.57, 75.65), (20.64, 75.67), (20.67, 75.64),
    (19.90, 74.77), (19.92, 74.83), (19.88, 74.90), (19.96, 74.95),
    (18.73, 76.43), (18.76, 76.47), (18.75, 76.35), (18.78, 76.32),
    (18.84, 75.36), (18.91, 75.28), (18.88, 75.40), (18.89, 75.44),
    (18.98, 75.76), (18.91, 75.28), (18.94, 75.72), (18.99, 75.71),
    (18.80, 76.01), (18.85, 76.05), (18.82, 76.10), (18.88, 76.08),
    (19.29, 75.69), (19.14, 76.19), (19.26, 75.75), (19.22, 75.71),
    (18.57, 76.01), (18.55, 76.05), (18.60, 76.08), (18.63, 76.12),
    (19.14, 76.22), (19.18, 76.09), (19.10, 76.15), (19.17, 76.25),
    (18.89, 76.48), (18.92, 76.52), (18.94, 76.55), (18.85, 76.51),
    (18.83, 75.63), (18.79, 75.59), (18.81, 75.61), (18.77, 75.67),
    (18.92, 75.54), (18.95, 75.58), (18.91, 75.60), (18.98, 75.52),
    (19.04, 76.05), (18.87, 75.58), (19.01, 76.09), (19.07, 76.03),
    (21.14, 79.62), (21.05, 79.54), (21.09, 79.67), (21.08, 79.58),
    (21.04, 79.79), (21.04, 79.74), (21.06, 79.82), (21.09, 79.73),
    (21.25, 79.51), (21.28, 79.56), (21.32, 79.50), (21.34, 79.52),
    (21.08, 79.46), (21.12, 79.39), (21.15, 79.42), (21.18, 79.35),
    (21.08, 79.91), (21.05, 79.95), (21.02, 79.88), (21.07, 79.98),
    (21.37, 79.33), (21.41, 79.37), (21.38, 79.41), (21.35, 79.46),
    (20.91, 80.05), (20.94, 80.12), (20.98, 80.08), (20.96, 80.15),
    (20.57, 76.22), (20.52, 76.15), (20.58, 76.12), (20.50, 76.24),
    (20.46, 76.27), (20.40, 76.43), (20.35, 76.35), (20.32, 76.32),
    (20.12, 76.26), (20.09, 76.31), (20.15, 76.38), (20.18, 76.33),
    (20.91, 76.54), (20.88, 76.58), (20.89, 76.47), (20.94, 76.62),
    (20.67, 76.65), (20.73, 76.59), (20.70, 76.57), (20.62, 76.68),
    (20.09, 76.52), (20.15, 76.50), (20.08, 76.47), (20.06, 76.45),
    (21.01, 76.26), (21.03, 76.17), (21.05, 76.21), (20.99, 76.19),
    (20.19, 76.71), (20.25, 76.65), (20.22, 76.59), (20.20, 76.55),
    (20.89, 76.24), (20.85, 76.21), (20.92, 76.31), (20.89, 76.34),
    (20.84, 76.44), (20.81, 76.49), (20.87, 76.50), (20.85, 76.52),
    (21.02, 76.79), (20.98, 76.82), (21.06, 76.81), (21.04, 76.76),
    (20.80, 76.85), (20.76, 76.81), (20.79, 76.77), (20.77, 76.88),
    (20.30, 76.01), (20.28, 75.98), (20.32, 75.95), (20.26, 76.05),
    (19.95, 79.28), (20.01, 79.35), (19.98, 79.31), (20.04, 79.39),
    (19.80, 79.17), (19.98, 79.20), (19.92, 79.14), (19.86, 79.11),
    (19.78, 79.44), (19.82, 79.51), (19.76, 79.48), (19.74, 79.46),
    (20.28, 79.08), (20.24, 79.11), (20.21, 79.15), (20.26, 79.19),
    (20.40, 79.31), (20.42, 79.35), (20.45, 79.39), (20.43, 79.42),
    (20.08, 79.09), (20.05, 79.12), (20.10, 79.15), (20.13, 79.18),
    (20.06, 79.45), (20.09, 79.51), (20.04, 79.54), (20.01, 79.57),
    (19.75, 79.59), (19.79, 79.62), (19.72, 79.65), (19.76, 79.69),
    (19.78, 79.32), (19.81, 79.35), (19.83, 79.38), (19.86, 79.41),
    (19.64, 79.22), (19.67, 79.25), (19.69, 79.28), (19.63, 79.31),
    (20.30, 79.23), (20.27, 79.26), (20.34, 79.20), (20.37, 79.21),
    (20.09, 79.62), (20.12, 79.65), (20.15, 79.68), (20.18, 79.71),
    (20.37, 79.91), (20.41, 79.94), (20.45, 79.97), (20.48, 80.01),
    (20.44, 79.78), (20.47, 79.74), (20.51, 79.81), (20.54, 79.84),
    (20.25, 79.52), (20.22, 79.55), (20.20, 79.58), (20.17, 79.61),
    (20.94, 74.83), (20.90, 74.79), (20.87, 74.75), (20.84, 74.80),
    (21.32, 74.05), (21.35, 74.10), (21.38, 74.08), (21.30, 74.12),
    (21.21, 74.63), (21.18, 74.68), (21.15, 74.71), (21.24, 74.67),
    (21.35, 74.90), (21.40, 74.85), (21.42, 74.88), (21.38, 74.92),
    (19.46, 79.94), (19.44, 79.91), (19.49, 79.87), (19.52, 79.90),
    (19.60, 80.37), (19.48, 80.45), (19.45, 80.40), (19.53, 80.42),
    (19.95, 79.99), (19.98, 80.02), (19.92, 80.05), (19.90, 80.08),
    (20.30, 79.88), (20.33, 79.85), (20.36, 79.82), (20.39, 79.86),
    (20.17, 80.03), (20.21, 80.06), (20.24, 80.09), (20.28, 80.12),
    (19.78, 80.25), (19.75, 80.28), (19.72, 80.31), (19.69, 80.34),
    (20.15, 79.90), (20.12, 79.87), (20.09, 79.84), (20.06, 79.81),
    (20.57, 80.34), (20.54, 80.31), (20.51, 80.28), (20.48, 80.25),
    (20.52, 80.10), (20.49, 80.13), (20.46, 80.16), (20.43, 80.19),
    (19.68, 80.05), (19.71, 80.08), (19.74, 80.11), (19.77, 80.14),
    (18.84, 80.07), (18.81, 80.10), (18.78, 80.13), (18.75, 80.16),
    (20.40, 79.95), (20.43, 79.92), (20.46, 79.99), (20.49, 80.02),
    (21.36, 80.55), (21.39, 80.52), (21.42, 80.58), (21.45, 80.51),
    (20.89, 80.01), (20.91, 80.04), (20.94, 80.07), (20.97, 80.10),
    (21.03, 80.25), (21.06, 80.22), (21.09, 80.28), (21.12, 80.31),
    (21.46, 80.20), (21.49, 80.23), (21.52, 80.26), (21.55, 80.29),
    (21.32, 80.35), (21.35, 80.38), (21.38, 80.41), (21.41, 80.44),
    (21.65, 80.40), (21.68, 80.43), (21.71, 80.46), (21.74, 80.49),
    (21.40, 79.95), (21.43, 79.98), (21.46, 80.01), (21.49, 80.04),
    (20.98, 80.21), (21.01, 80.18), (21.04, 80.24), (21.07, 80.27),
    (19.46, 77.05), (19.48, 77.08), (19.42, 77.01), (19.50, 77.03),
    (19.38, 77.15), (19.35, 77.18), (19.32, 77.21), (19.40, 77.24),
    (19.70, 77.13), (19.73, 77.16), (19.76, 77.19), (19.79, 77.22),
    (19.67, 77.30), (19.70, 77.33), (19.73, 77.36), (19.76, 77.39),
    (19.78, 77.01), (19.81, 77.04), (19.84, 77.07), (19.87, 77.10),
    (21.03, 75.05), (21.06, 75.08), (21.09, 75.11), (21.12, 75.14),
    (20.65, 75.36), (20.68, 75.39), (20.62, 75.33), (20.71, 75.42),
    (21.04, 75.79), (21.07, 75.82), (21.10, 75.85), (21.13, 75.88),
    (20.47, 74.96), (20.50, 74.99), (20.53, 75.02), (20.56, 75.05),
    (21.25, 75.30), (21.28, 75.33), (21.31, 75.36), (21.34, 75.39),
    (20.92, 75.34), (20.95, 75.37), (20.98, 75.40), (21.01, 75.43),
    (20.99, 75.56), (21.02, 75.59), (21.05, 75.62), (21.08, 75.65),
    (20.71, 75.76), (20.74, 75.79), (20.77, 75.82), (20.80, 75.85),
    (21.25, 76.01), (21.28, 76.04), (21.31, 76.07), (21.34, 76.10),
    (20.67, 75.36), (20.70, 75.39), (20.73, 75.42), (20.76, 75.45),
    (20.88, 75.00), (20.91, 75.03), (20.94, 75.06), (20.97, 75.09),
    (21.25, 76.04), (21.28, 76.07), (21.31, 76.10), (21.34, 76.13),
    (21.20, 75.70), (21.23, 75.73), (21.26, 75.76), (21.29, 75.79),
    (19.61, 75.76), (19.64, 75.79), (19.67, 75.82), (19.70, 75.85),
    (19.82, 75.69), (19.85, 75.72), (19.88, 75.75), (19.91, 75.78),
    (20.37, 75.76), (20.40, 75.79), (20.43, 75.82), (20.46, 75.85),
    (19.46, 76.04), (19.49, 76.07), (19.52, 76.10), (19.55, 76.13),
    (20.08, 76.01), (20.11, 76.04), (20.14, 76.07), (20.17, 76.10),
    (19.83, 75.88), (19.86, 75.91), (19.89, 75.94), (19.92, 75.97),
    (19.33, 76.22), (19.36, 76.25), (19.39, 76.28), (19.42, 76.31),
    (19.62, 76.81), (19.65, 76.84), (19.68, 76.87), (19.71, 76.90),
    (16.09, 74.13), (16.12, 74.16), (16.15, 74.19), (16.18, 74.22),
    (16.13, 74.00), (16.16, 74.03), (16.19, 74.06), (16.22, 74.09),
    (15.95, 74.20), (15.98, 74.23), (16.01, 74.26), (16.04, 74.29),
    (16.22, 74.32), (16.25, 74.35), (16.28, 74.38), (16.31, 74.41),
    (16.71, 73.83), (16.74, 73.86), (16.77, 73.89), (16.80, 73.92),
    (16.71, 74.52), (16.74, 74.55), (16.77, 74.58), (16.80, 74.61),
    (16.70, 74.24), (16.73, 74.27), (16.76, 74.30), (16.79, 74.33),
    (16.59, 74.25), (16.62, 74.28), (16.65, 74.31), (16.68, 74.34),
    (16.76, 74.12), (16.79, 74.15), (16.82, 74.18), (16.85, 74.21),
    (16.48, 73.90), (16.51, 73.93), (16.54, 73.96), (16.57, 73.99),
    (17.00, 73.98), (17.03, 74.01), (17.06, 74.04), (17.09, 74.07),
    (16.74, 74.58), (16.77, 74.61), (16.80, 74.64), (16.83, 74.67),
    (18.67, 77.10), (18.64, 77.13), (18.61, 77.16), (18.58, 77.19),
    (18.06, 76.50), (18.09, 76.53), (18.12, 76.56), (18.15, 76.59),
    (18.17, 76.65), (18.20, 76.68), (18.23, 76.71), (18.26, 76.74),
    (18.22, 77.30), (18.25, 77.33), (18.28, 77.36), (18.31, 77.39),
    (18.20, 75.95), (18.23, 75.98), (18.26, 76.01), (18.29, 76.04),
    (18.40, 76.58), (18.43, 76.61), (18.46, 76.64), (18.49, 76.67),
    (18.10, 76.76), (18.13, 76.79), (18.16, 76.82), (18.19, 76.85),
    (18.26, 76.35), (18.29, 76.38), (18.32, 76.41), (18.35, 76.44),
    (18.55, 76.48), (18.58, 76.51), (18.61, 76.54), (18.64, 76.57),
    (18.39, 77.10), (18.42, 77.13), (18.45, 77.16), (18.48, 77.19),
    (18.9219,72.8347), (18.9272,72.8252), (18.9238,72.8322), (18.9325,72.8328),
    (18.9567,72.7981), (18.9599,72.8020), (18.9572,72.7963), (18.9565,72.7925),
    (18.9463,72.8344), (18.9443,72.8227), (18.9525,72.8346), (18.9550,72.8380),
    (18.9754,72.8317), (18.9734,72.8370), (18.9691,72.8221), (18.9774,72.8290),
    (21.11, 79.06), (21.13, 79.05), (21.09, 79.09), (21.08, 79.07),
    (21.07, 79.15), (21.08, 79.08), (21.10, 79.11), (21.11, 78.96),
    (21.07, 78.96), (21.06, 78.94), (21.07, 78.91), (20.70, 77.00),
    (20.78, 79.03), (20.75, 79.08), (20.72, 79.04), (21.01, 79.36),
    (21.01, 79.37), (20.98, 79.43), (20.95, 79.42), (20.94, 79.69),
    (20.69, 79.27), (20.83, 79.49), (20.68, 79.35), (21.08, 79.24),
    (21.20, 79.14), (21.32, 79.03), (21.28, 79.24), (21.25, 79.31),
    (21.23, 79.35), (21.22, 79.30), (21.20, 79.32), (21.36, 79.31),
    (21.41, 79.28), (21.43, 79.20), (21.40, 79.24), (21.38, 79.14),
    (21.40, 79.09), (21.32, 79.16), (21.34, 79.19), (21.38, 78.91),
    (21.32, 79.00), (21.34, 78.88), (21.24, 78.89), (21.25, 78.93),
    (21.22, 78.85), (21.20, 78.90), (21.23, 78.73), (21.20, 78.50),
    (21.27, 78.53), (21.18, 78.47), (21.49, 78.48), (21.45, 78.45),
    (21.48,78.53), (21.42,78.43),(19.1462,77.3093), (19.1416,77.3878), (19.1678,77.2913), (19.2274,77.3197),
    (19.4939,77.6713), (19.4678,77.6415), (19.4795,77.6521), (19.4326,77.7478),
    (19.7828,78.1065), (19.8249,78.0863), (19.8803,78.0642), (19.6416, 78.1364),
    (19.2312,77.4938), (19.2550,77.5126), (19.2137, 77.5641), (19.3092, 77.5418),
    (18.5986,77.5312), (18.6657,77.6087), (18.6277,77.6438), (18.7241, 77.6009),
    (18.3618,77.6180), (18.4239,77.5744), (18.4116, 77.5504), (18.4485, 77.4244),
    (18.3582,77.4098), (18.4552,77.4641), (18.5020,77.4322), (18.4862, 77.4587),
    (18.7745,77.3006), (18.8252,77.2403), (18.9171, 77.3592), (18.8872, 77.3891),
    (19.0664,77.4646), (19.0982,77.4194), (19.1235, 77.4478), (19.1408, 77.4292),
    (19.1205,77.4262), (19.1678,77.4110), (19.1555, 77.4087), (19.1368, 77.4372),
    (19.1593,77.4197), (19.1706,77.4304), (19.1824, 77.4299), (19.2001, 77.4057),
    (19.1979,77.4235), (19.1887,77.4356), (19.2125, 77.4283), (19.2312, 77.4419),
    (19.2278,77.4623), (19.2456,77.4521), (19.2679, 77.4431), (19.2882, 77.4320),
    (19.3015,77.4298), (19.3102,77.4187), (19.3245, 77.4319), (19.3367, 77.4480),        
    (21.57,74.05), (21.58,74.07), (21.59, 74.03), (21.58, 74.06),
    (21.61, 74.39), (21.68, 74.28), (21.60, 74.45), (21.65, 74.42),
    (21.46, 74.22), (21.42, 74.27), (21.49, 74.25), (21.43, 74.23),
    (21.54, 74.19), (21.52, 74.20), (21.56, 74.18), (21.50, 74.17),
    (21.36, 73.68), (21.35, 73.71), (21.39, 73.66), (21.33, 73.72),
    (21.28, 73.58), (21.34, 73.62), (21.30, 73.61), (21.32, 73.64),
    (20.01, 73.80), (20.00, 73.78), (20.02, 73.77), (20.04, 73.79),
    (19.85, 73.65), (19.83, 73.70), (19.88, 73.68), (19.86, 73.72),
    (19.93, 73.54), (19.95, 73.52), (19.92, 73.56), (19.91, 73.55),
    (20.17, 74.02), (20.15, 74.04), (20.18, 74.01), (20.16, 74.03),
    (20.37, 73.53), (20.35, 73.52), (20.38, 73.55), (20.36, 73.56),
    (20.48, 74.01), (20.50, 74.00), (20.47, 74.03), (20.49, 74.02),
    (20.53, 73.56), (20.55, 73.54), (20.52, 73.57), (20.54, 73.58),
    (20.32, 74.24), (20.35, 74.22), (20.30, 74.25), (20.33, 74.23),
    (20.36, 74.55), (20.38, 74.54), (20.34, 74.56), (20.37, 74.57),
    (20.62, 74.34), (20.65, 74.32), (20.60, 74.36), (20.64, 74.35),
    (20.57, 74.28), (20.59, 74.27), (20.55, 74.29), (20.58, 74.26),
    (20.42, 74.19), (20.40, 74.21), (20.44, 74.18), (20.41, 74.20),
    (20.48, 74.49), (20.50, 74.47), (20.46, 74.51), (20.49, 74.50),
    (20.08, 74.05), (20.10, 74.03), (20.06, 74.07), (20.09, 74.06),
    (19.90, 74.00), (19.88, 74.02), (19.92, 74.01), (19.89, 74.03),
    (18.15, 76.05), (18.12, 76.03), (18.17, 76.02), (18.14, 76.06),
    (17.95, 76.10), (17.92, 76.12), (17.96, 76.11), (17.93, 76.14),
    (17.82, 76.33), (17.84, 76.32), (17.80, 76.35), (17.83, 76.34),
    (17.78, 76.45), (17.76, 76.42), (17.79, 76.41), (17.77, 76.43),
    (18.25, 75.80), (18.28, 75.82), (18.26, 75.81), (18.24, 75.83),
    (18.18, 75.88), (18.20, 75.87), (18.19, 75.89), (18.17, 75.91),
    (18.42, 75.75), (18.40, 75.77), (18.43, 75.76), (18.41, 75.78),
    (18.30, 75.98), (18.32, 75.97), (18.31, 75.99), (18.29, 76.00),
    (19.69, 72.77), (19.79, 72.76), (19.75, 72.78), (19.72, 72.80),
    (19.34, 72.83), (19.41, 72.84), (19.45, 72.82), (19.40, 72.85),
    (19.45, 72.82), (19.48, 72.79), (19.43, 72.81), (19.44, 72.83),
    (20.00, 72.77), (20.03, 72.79), (20.02, 72.78), (20.01, 72.80),
    (20.10, 72.82), (20.12, 72.84), (20.11, 72.83), (20.13, 72.85),
    (19.92, 73.23), (19.95, 73.21), (19.90, 73.25), (19.93, 73.24),
    (19.80, 73.25), (19.82, 73.24), (19.81, 73.26), (19.83, 73.27),
    (19.48, 73.07), (19.50, 73.09), (19.47, 73.08), (19.49, 73.10),
    (19.26, 76.78), (19.28, 76.79), (19.27, 76.80), (19.29, 76.81),
    (19.23, 76.92), (19.25, 76.90), (19.22, 76.93), (19.24, 76.94),
    (19.62, 76.71), (19.60, 76.73), (19.64, 76.70), (19.61, 76.72),
    (19.06, 76.88), (19.08, 76.87), (19.07, 76.89), (19.09, 76.90),
    (19.34, 76.62), (19.36, 76.60), (19.33, 76.64), (19.35, 76.65),
    (19.46, 76.47), (19.48, 76.46), (19.47, 76.48), (19.45, 76.49),
    (19.18, 76.95), (19.20, 76.94), (19.17, 76.96), (19.19, 76.97),
    (19.19, 77.01), (19.21, 77.00), (19.18, 77.02), (19.20, 77.03),
    (18.55, 73.92), (18.56, 73.94), (18.60, 73.91), (18.52, 73.93),
    (18.57, 73.98), (18.53, 73.96), (18.46, 73.97), (18.45, 73.90),
    (18.52, 73.55), (18.50, 73.49), (18.51, 73.53), (18.53, 73.54),
    (18.75, 73.39), (18.73, 73.41), (18.76, 73.40), (18.74, 73.42),
    (18.84, 73.86), (18.79, 73.88), (18.80, 73.87), (18.81, 73.85),
    (19.22, 73.85), (19.20, 73.87), (19.23, 73.84), (19.21, 73.86),
    (18.75, 74.37), (18.72, 74.39), (18.77, 74.38), (18.74, 74.40),
    (18.11, 75.02), (18.08, 75.04), (18.12, 75.03), (18.10, 75.01),
    (18.14, 74.32), (18.16, 74.34), (18.13, 74.31), (18.15, 74.33),
    (18.15, 74.58), (18.12, 74.60), (18.16, 74.57), (18.13, 74.59),
    (18.25, 74.05), (18.23, 74.07), (18.26, 74.06), (18.24, 74.08),
    (18.26, 73.59), (18.28, 73.61), (18.27, 73.60), (18.29, 73.62),
    (18.14, 73.80), (18.12, 73.82), (18.15, 73.81), (18.13, 73.83),
    (19.04, 74.08), (19.06, 74.06), (19.05, 74.09), (19.07, 74.07),
    (18.64, 72.87), (18.66, 72.84), (18.78, 72.90), (18.68, 72.88),
    (18.75, 73.12), (18.78, 73.15), (18.77, 73.13), (18.76, 73.14),
    (18.99, 73.11), (18.98, 73.13), (18.96, 73.14), (18.97, 73.15),
    (18.98, 72.95), (18.96, 72.98), (18.97, 72.96), (18.99, 72.97),
    (18.89, 73.32), (18.87, 73.34), (18.90, 73.31), (18.88, 73.33),
    (18.85, 73.39), (18.87, 73.41), (18.84, 73.40), (18.86, 73.42),
    (18.15, 73.08), (18.17, 73.10), (18.14, 73.09), (18.16, 73.11),
    (18.53, 73.17), (18.55, 73.19), (18.54, 73.18), (18.56, 73.20),
    (18.43, 73.09), (18.45, 73.11), (18.44, 73.10), (18.46, 73.12),
    (18.06, 72.95), (18.08, 72.97), (18.07, 72.96), (18.09, 72.98),
    (18.29, 72.97), (18.31, 72.99), (18.30, 72.98), (18.32, 73.00),
    (18.14, 73.34), (18.16, 73.36), (18.15, 73.35), (18.17, 73.37),
    (18.10, 73.46), (18.12, 73.48), (18.11, 73.47), (18.13, 73.49),
    (17.98, 73.46), (18.00, 73.48), (17.99, 73.47), (18.01, 73.49),
    (18.17, 73.22), (18.19, 73.24), (18.18, 73.23), (18.20, 73.25),
    (16.99, 73.30), (16.96, 73.32), (17.00, 73.31), (16.98, 73.33),
    (16.89, 73.57), (16.91, 73.55), (16.88, 73.58), (16.90, 73.56),
    (16.63, 73.54), (16.65, 73.56), (16.64, 73.55), (16.66, 73.57),
    (17.13, 73.56), (17.15, 73.58), (17.14, 73.57), (17.16, 73.59),
    (17.54, 73.53), (17.52, 73.55), (17.55, 73.54), (17.53, 73.56),
    (17.37, 73.20), (17.39, 73.22), (17.38, 73.21), (17.40, 73.23),
    (17.56, 73.12), (17.58, 73.14), (17.57, 73.13), (17.59, 73.15),
    (17.65, 73.32), (17.67, 73.34), (17.66, 73.33), (17.68, 73.35),
    (17.69, 73.30), (17.71, 73.31), (17.70, 73.32), (17.72, 73.33),
    (16.85, 74.57), (16.82, 74.55), (16.86, 74.54), (16.83, 74.58),
    (16.83, 74.63), (16.84, 74.65), (16.85, 74.62), (16.86, 74.64),
    (16.83, 75.25), (16.85, 75.24), (16.84, 75.26), (16.86, 75.23),
    (17.15, 75.05), (17.17, 75.07), (17.16, 75.06), (17.18, 75.08),
    (17.03, 74.77), (17.05, 74.79), (17.04, 74.78), (17.06, 74.80),
    (17.01, 74.29), (17.03, 74.31), (17.02, 74.30), (17.04, 74.32),
    (17.22, 73.99), (17.20, 74.01), (17.23, 74.00), (17.21, 74.02),
    (17.00, 74.38), (17.02, 74.40), (17.01, 74.39), (17.03, 74.41),
    (17.12, 74.20), (17.14, 74.22), (17.13, 74.21), (17.15, 74.23),
    (17.44, 75.14), (17.46, 75.16), (17.45, 75.15), (17.47, 75.17),
    (17.68, 73.99), (17.70, 74.01), (17.69, 74.00), (17.71, 74.02),
    (17.97, 73.88), (17.95, 73.90), (17.98, 73.89), (17.96, 73.91),
    (17.93, 73.65), (17.95, 73.67), (17.94, 73.66), (17.96, 73.68),
    (17.76, 74.19), (17.78, 74.21), (17.77, 74.20), (17.79, 74.22),
    (17.28, 74.19), (17.30, 74.21), (17.29, 74.20), (17.31, 74.22),
    (17.37, 73.89), (17.39, 73.91), (17.38, 73.90), (17.40, 73.92),
    (17.70, 73.84), (17.72, 73.86), (17.71, 73.85), (17.73, 73.87),
    (17.99, 74.29), (18.01, 74.31), (18.00, 74.30), (18.02, 74.32),
    (17.48, 74.49), (17.50, 74.51), (17.49, 74.50), (17.51, 74.52),
    (17.75, 74.65), (17.77, 74.67), (17.76, 74.66), (17.78, 74.68),
    (18.03, 74.11), (18.05, 74.13), (18.04, 74.12), (18.06, 74.14),
    (15.90, 73.80), (15.88, 73.82), (15.91, 73.81), (15.89, 73.83),
    (15.98, 73.68), (16.00, 73.70), (15.99, 73.69), (16.01, 73.71),
    (15.84, 73.63), (15.86, 73.65), (15.85, 73.64), (15.87, 73.66),
    (16.04, 73.45), (16.06, 73.47), (16.05, 73.46), (16.07, 73.48),
    (16.27, 73.68), (16.29, 73.70), (16.28, 73.69), (16.30, 73.71),
    (16.38, 73.37), (16.40, 73.39), (16.39, 73.38), (16.41, 73.40),
    (16.63, 73.70), (16.65, 73.72), (16.64, 73.71), (16.66, 73.73),
    (15.75, 74.00), (15.77, 74.02), (15.76, 74.01), (15.78, 74.03),
    (17.65, 75.90), (17.67, 75.92), (17.66, 75.91), (17.68, 75.93),
    (17.58, 75.90), (17.60, 75.92), (17.59, 75.91), (17.61, 75.93),
    (18.25, 75.69), (18.27, 75.71), (18.26, 75.70), (18.28, 75.72),
    (17.42, 76.22), (17.44, 76.24), (17.43, 76.23), (17.45, 76.25),
    (17.46, 75.31), (17.48, 75.33), (17.47, 75.32), (17.49, 75.34),
    (17.68, 75.32), (17.70, 75.34), (17.69, 75.33), (17.71, 75.35),
    (17.48, 75.52), (17.50, 75.54), (17.49, 75.53), (17.51, 75.55),
    (17.66, 75.60), (17.68, 75.62), (17.67, 75.61), (17.69, 75.63),
    (17.85, 75.51), (17.87, 75.53), (17.86, 75.52), (17.88, 75.54),
    (17.81, 75.21), (17.83, 75.23), (17.82, 75.22), (17.84, 75.24),
    (17.91, 74.92), (17.93, 74.94), (17.92, 74.93), (17.94, 74.95),
    (19.22, 72.96), (19.18, 73.01), (19.19, 73.00), (19.23, 72.97),
    (19.23, 73.13), (19.21, 73.10), (19.34, 73.23), (19.29, 73.20),
    (19.25, 73.55), (19.27, 73.57), (19.26, 73.56), (19.28, 73.58),
    (19.33, 73.06), (19.35, 73.08), (19.34, 73.07), (19.36, 73.09),
    (19.45, 73.34), (19.47, 73.36), (19.46, 73.35), (19.48, 73.37),
    (19.22, 73.16), (19.24, 73.18), (19.23, 73.17), (19.25, 73.19),
    (19.20, 73.15), (19.21, 73.14), (19.19, 73.13), (19.22, 73.12),
    (20.75, 78.61), (20.73, 78.63), (20.74, 78.62), (20.76, 78.64),
    (20.66, 78.43), (20.68, 78.45), (20.67, 78.44), (20.69, 78.46),
    (20.94, 78.25), (20.96, 78.27), (20.95, 78.26), (20.97, 78.28),
    (20.89, 78.09), (20.91, 78.11), (20.90, 78.10), (20.92, 78.12),
    (20.82, 78.07), (20.84, 78.09), (20.83, 78.08), (20.85, 78.10),
    (20.57, 78.85), (20.59, 78.87), (20.58, 78.86), (20.60, 78.88),
    (20.56, 79.03), (20.58, 79.05), (20.57, 79.04), (20.59, 79.06),
    (20.81, 79.18), (20.83, 79.20), (20.82, 79.19), (20.84, 79.21),
    (20.09, 77.15), (20.07, 77.17), (20.10, 77.16), (20.08, 77.18),
    (20.13, 77.01), (20.15, 77.03), (20.14, 77.02), (20.16, 77.04),
    (20.32, 77.35), (20.34, 77.37), (20.33, 77.36), (20.35, 77.38),
    (20.40, 77.48), (20.42, 77.50), (20.41, 77.49), (20.43, 77.51),
    (20.34, 77.08), (20.36, 77.10), (20.35, 77.09), (20.37, 77.11),
    (20.16, 77.32), (20.18, 77.34), (20.17, 77.33), (20.19, 77.35),
    (20.39, 78.13), (20.41, 78.15), (20.40, 78.14), (20.42, 78.16),
    (20.17, 78.02), (20.19, 78.04), (20.18, 78.03), (20.20, 78.05),
    (20.35, 77.85), (20.37, 77.87), (20.36, 77.86), (20.38, 77.88),
    (20.28, 77.58), (20.30, 77.60), (20.29, 77.59), (20.31, 77.61),
    (20.13, 77.80), (20.15, 77.82), (20.14, 77.81), (20.16, 77.83),
    (19.98, 77.57), (20.00, 77.59), (19.99, 77.58), (20.01, 77.60),
    (19.95, 77.30), (19.97, 77.32), (19.96, 77.31), (19.98, 77.33),
    (20.20, 78.27), (20.22, 78.29), (20.21, 78.28), (20.23, 78.30),
    (20.10, 78.60), (20.12, 78.62), (20.11, 78.61), (20.13, 78.63),
    (20.02, 78.72), (20.04, 78.74), (20.03, 78.73), (20.05, 78.75),
    (20.09, 78.88), (20.11, 78.90), (20.10, 78.89), (20.12, 78.91),
    (20.32, 77.94), (20.34, 77.96), (20.33, 77.95), (20.35, 77.97),
    (20.22, 78.09), (20.24, 78.11), (20.23, 78.10), (20.25, 78.12),
    (20.40, 78.38), (20.42, 78.40), (20.41, 78.39), (20.43, 78.41),
    (20.30, 77.72), (20.32, 77.74), (20.31, 77.73), (20.33, 77.75),


]

# [All your previous functions here: initialize_gee, get_location, fetch_sentinel2, fetch_sentinel1,
# calculate_slope_aspect_hillshade, fetch_dem_and_topo, fetch_nasa_power_with_lags,
# merge_data_enhanced, classify_weather, ml_predict, fetch_complete_data...]

# ----------

# New snippet to calculate rainfall chance for past 10 days
def rainfall_chance_past_days(df, model, feature_names, days=10, threshold=1.0):
    today_str = datetime.datetime.today().strftime('%Y-%m-%d')
    df['date'] = pd.to_datetime(df['date'])
    past_start_date = pd.to_datetime(today_str) - pd.Timedelta(days=days)
    mask = (df['date'] > past_start_date) & (df['date'] <= pd.to_datetime(today_str))
    past_df = df.loc[mask].copy()
    if past_df.empty:
        print(f"⚠️ No data found for past {days} days to calculate rainfall chance.")
        return
    X_past = past_df.drop(columns=['date', 'predicted_rainfall', 'weather_condition'], errors='ignore')
    X_past = X_past.reindex(columns=feature_names, fill_value=0)
    preds = model.predict(X_past)
    prob = np.mean(preds > threshold) * 100
    print(f"\n🌧️ Chance of rainfall (> {threshold}mm) in past {days} days: {prob:.1f}%")

# ----------

if __name__ == "__main__":
    initialize_gee()
    today = datetime.datetime.today()
    start_date = (today - datetime.timedelta(days=5 * 365)).strftime('%Y-%m-%d')
    end_date = today.strftime('%Y-%m-%d')
    model_file = "india_global_model.pkl"
    if not os.path.exists(model_file):
        print("Training global model across all Maharashtra locations...")
        all_data = []
        def fetch_and_print(lat, lon):
            print(f"\nFetching data for lat: {lat}, lon: {lon}")
            df_loc = fetch_complete_data(lat, lon, start_date, end_date)
            return df_loc
        with ThreadPoolExecutor(max_workers=8) as executor:
            futures = {executor.submit(fetch_and_print, lat, lon): (lat, lon) for lat, lon in maharashtra_coordinates}
            for future in as_completed(futures):
                lat, lon = futures[future]
                try:
                    loc_df = future.result()
                    all_data.append(loc_df)
                    print(f"✅ Data fetched for {lat}, {lon}")
                except Exception as e:
                    print(f"❌ Failed to fetch for {lat}, {lon}: {e}")
        if all_data:
            global_df = pd.concat(all_data, ignore_index=True)
            if 'PRECTOTCORR' not in global_df.columns and 'PRECTOT' in global_df.columns:
                global_df['PRECTOTCORR'] = global_df['PRECTOT']
            print("Running ML training on concatenated global Maharashtra data...")
            stack_model = ml_predict(global_df)
            joblib.dump(stack_model, model_file)
            print(f"✅ Global model saved to {model_file}")
        else:
            print("No data fetched; cannot train model.")
            sys.exit(1)
    else:
        print(f"Loading saved global model from {model_file}...")
        stack_model = joblib.load(model_file)
        print("✅ Global model loaded successfully")
    lat, lon = get_location()
    print(f"\nFetching data for your location lat: {lat}, lon: {lon}")
    final_df = fetch_complete_data(lat, lon, start_date, end_date)
    feature_names = joblib.load("india_feature_names.pkl")
    def prepare_features(df):
        X = df.drop(columns=['date', 'predicted_rainfall', 'weather_condition'], errors='ignore')
        X = X.reindex(columns=feature_names, fill_value=0)
        return X
    features = prepare_features(final_df)
    final_df['predicted_rainfall'] = stack_model.predict(features)

    # New addition: Calculate rainfall chance for past 10 days
    rainfall_chance_past_days(final_df, stack_model, feature_names, days=10, threshold=1.0)

    if 'PRECTOTCORR' in final_df.columns and 'predicted_rainfall' in final_df.columns:
        cols = list(final_df.columns)
        cols.remove('PRECTOTCORR')
        cols.remove('predicted_rainfall')
        idx = cols.index('predicted_rainfall') if 'predicted_rainfall' in cols else len(cols)
        cols.insert(idx, 'PRECTOTCORR')
        cols.insert(idx + 1, 'predicted_rainfall')
        final_df = final_df[cols]
        print("\n✅ Prediction for your location (first 10 rows):")
        print(final_df.head(10))

    if 'PRECTOTCORR' in final_df.columns:
        from sklearn.model_selection import train_test_split
        from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
        y = final_df['PRECTOTCORR'].values
        X = features.values
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        y_train_pred = stack_model.predict(X_train)
        train_mae = mean_absolute_error(y_train, y_train_pred)
        train_rmse = np.sqrt(mean_squared_error(y_train, y_train_pred))
        train_r2 = r2_score(y_train, y_train_pred)
        y_test_pred = stack_model.predict(X_test)
        test_mae = mean_absolute_error(y_test, y_test_pred)
        test_rmse = np.sqrt(mean_squared_error(y_test, y_test_pred))
        test_r2 = r2_score(y_test, y_test_pred)
        print(f"\n✅ Training -> MAE: {train_mae:.3f}, RMSE: {train_rmse:.3f}, R²: {train_r2:.4f}")
        print(f"✅ Testing -> MAE: {test_mae:.3f}, RMSE: {test_rmse:.3f}, R²: {test_r2:.4f}")
